"""
Rotas para sistema de notifica√ß√µes
"""

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import List, Optional, Dict, Any
from pydantic import BaseModel

from ..utils.notifications import (
    notification_manager,
    notify_new_ticket,
    notify_ticket_assigned,
    notify_task_completed,
    notify_new_message,
    notify_system_update
)

# Importar fun√ß√£o de verifica√ß√£o de token
try:
    from ..utils.auth import verify_token
except ImportError:
    import jwt

    SECRET_KEY = "sordchat_secret_key_2025"
    ALGORITHM = "HS256"


    def verify_token(token: str):
        try:
            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
            return payload
        except jwt.PyJWTError:
            return None

router = APIRouter(prefix="/notifications", tags=["üîî Notifica√ß√µes"])
security = HTTPBearer()


def get_current_user_from_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """Obt√©m usu√°rio atual do token"""
    token = credentials.credentials
    payload = verify_token(token)

    if not payload:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token inv√°lido"
        )

    return payload


# Schemas
class NotificationCreate(BaseModel):
    title: str
    message: str
    type: str = "info"
    data: Optional[Dict[str, Any]] = None


class PushSubscription(BaseModel):
    endpoint: str
    keys: Dict[str, str]


@router.get("/")
async def get_notifications(
        unread_only: bool = False,
        limit: int = 50,
        current_user=Depends(get_current_user_from_token)
):
    """üìã Lista notifica√ß√µes do usu√°rio"""

    user_id = current_user.get("user_id")

    notifications = notification_manager.get_user_notifications(
        user_id=user_id,
        unread_only=unread_only,
        limit=limit
    )

    unread_count = notification_manager.get_unread_count(user_id)

    return {
        "notifications": notifications,
        "total": len(notifications),
        "unread_count": unread_count
    }


@router.get("/unread-count")
async def get_unread_count(current_user=Depends(get_current_user_from_token)):
    """üî¢ Quantidade de notifica√ß√µes n√£o lidas"""

    user_id = current_user.get("user_id")
    count = notification_manager.get_unread_count(user_id)

    return {"unread_count": count}


@router.post("/")
async def create_notification(
        notification_data: NotificationCreate,
        target_user_id: Optional[int] = None,
        current_user=Depends(get_current_user_from_token)
):
    """üì§ Criar notifica√ß√£o (apenas admins podem enviar para outros usu√°rios)"""

    user_id = current_user.get("user_id")
    access_level = current_user.get("access_level")

    # Se n√£o especificou usu√°rio alvo, enviar para si mesmo
    if target_user_id is None:
        target_user_id = user_id

    # Verificar permiss√£o para enviar para outros usu√°rios
    if target_user_id != user_id and access_level != "master":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Apenas administradores podem enviar notifica√ß√µes para outros usu√°rios"
        )

    notification_id = await notification_manager.create_notification(
        user_id=target_user_id,
        title=notification_data.title,
        message=notification_data.message,
        notification_type=notification_data.type,
        data=notification_data.data
    )

    return {
        "message": "Notifica√ß√£o criada com sucesso",
        "notification_id": notification_id
    }


@router.post("/{notification_id}/read")
async def mark_notification_as_read(
        notification_id: str,
        current_user=Depends(get_current_user_from_token)
):
    """‚úÖ Marcar notifica√ß√£o como lida"""

    user_id = current_user.get("user_id")

    success = notification_manager.mark_as_read(user_id, notification_id)

    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Notifica√ß√£o n√£o encontrada"
        )

    return {"message": "Notifica√ß√£o marcada como lida"}


@router.post("/mark-all-read")
async def mark_all_notifications_as_read(current_user=Depends(get_current_user_from_token)):
    """‚úÖ Marcar todas as notifica√ß√µes como lidas"""

    user_id = current_user.get("user_id")
    count = notification_manager.mark_all_as_read(user_id)

    return {
        "message": f"{count} notifica√ß√µes marcadas como lidas",
        "count": count
    }


@router.delete("/{notification_id}")
async def delete_notification(
        notification_id: str,
        current_user=Depends(get_current_user_from_token)
):
    """üóëÔ∏è Excluir notifica√ß√£o"""

    user_id = current_user.get("user_id")

    success = notification_manager.delete_notification(user_id, notification_id)

    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Notifica√ß√£o n√£o encontrada"
        )

    return {"message": "Notifica√ß√£o exclu√≠da com sucesso"}


@router.post("/subscribe")
async def subscribe_to_push_notifications(
        subscription: PushSubscription,
        current_user=Depends(get_current_user_from_token)
):
    """üîî Inscrever-se para push notifications"""

    user_id = current_user.get("user_id")

    notification_manager.subscribe_user(
        user_id=user_id,
        subscription_data=subscription.dict()
    )

    return {"message": "Inscrito para push notifications com sucesso"}


@router.delete("/unsubscribe")
async def unsubscribe_from_push_notifications(current_user=Depends(get_current_user_from_token)):
    """üîï Cancelar inscri√ß√£o de push notifications"""

    user_id = current_user.get("user_id")
    notification_manager.unsubscribe_user(user_id)

    return {"message": "Inscri√ß√£o cancelada com sucesso"}


# Endpoints para testar diferentes tipos de notifica√ß√£o
@router.post("/test/ticket")
async def test_ticket_notification(current_user=Depends(get_current_user_from_token)):
    """üß™ Testar notifica√ß√£o de ticket"""

    user_id = current_user.get("user_id")
    await notify_new_ticket(user_id, "Ticket de Teste", 999)

    return {"message": "Notifica√ß√£o de ticket enviada"}


@router.post("/test/task")
async def test_task_notification(current_user=Depends(get_current_user_from_token)):
    """üß™ Testar notifica√ß√£o de task"""

    user_id = current_user.get("user_id")
    await notify_task_completed(user_id, "Task de Teste", 999)

    return {"message": "Notifica√ß√£o de task enviada"}


@router.post("/test/message")
async def test_message_notification(current_user=Depends(get_current_user_from_token)):
    """üß™ Testar notifica√ß√£o de mensagem"""

    user_id = current_user.get("user_id")
    await notify_new_message(user_id, "Sistema", "Esta √© uma mensagem de teste do sistema de notifica√ß√µes")

    return {"message": "Notifica√ß√£o de mensagem enviada"}


@router.post("/broadcast")
async def broadcast_notification(
        notification_data: NotificationCreate,
        current_user=Depends(get_current_user_from_token)
):
    """üì¢ Enviar notifica√ß√£o para todos os usu√°rios (apenas admin)"""

    access_level = current_user.get("access_level")

    if access_level != "master":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Apenas administradores podem enviar broadcasts"
        )

    # Simular envio para todos os usu√°rios (IDs 1, 2, 3)
    user_ids = [1, 2, 3]
    sent_count = 0

    for user_id in user_ids:
        try:
            await notification_manager.create_notification(
                user_id=user_id,
                title=f"üì¢ {notification_data.title}",
                message=notification_data.message,
                notification_type=notification_data.type,
                data=notification_data.data
            )
            sent_count += 1
        except Exception as e:
            print(f"Erro ao enviar para usu√°rio {user_id}: {e}")

    return {
        "message": f"Broadcast enviado para {sent_count} usu√°rios",
        "sent_count": sent_count
    }


@router.get("/stats")
async def get_notification_stats(current_user=Depends(get_current_user_from_token)):
    """üìä Estat√≠sticas de notifica√ß√µes"""

    user_id = current_user.get("user_id")

    all_notifications = notification_manager.get_user_notifications(user_id, limit=1000)
    unread_count = notification_manager.get_unread_count(user_id)

    # Contar por tipo
    type_counts = {}
    for notif in all_notifications:
        notif_type = notif['type']
        type_counts[notif_type] = type_counts.get(notif_type, 0) + 1

    return {
        "total_notifications": len(all_notifications),
        "unread_count": unread_count,
        "read_count": len(all_notifications) - unread_count,
        "by_type": type_counts,
        "recent_notifications": all_notifications[:5]
    }